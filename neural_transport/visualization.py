import matplotlib.pyplot as plt
import jax.numpy as jnp
import numpy as np
from jax.scipy.stats import multivariate_normal


def plot_contours(ax, samples, title, cmap="Blues"):
    """
    Plot contours for the given samples.

    Parameters:
    ax: matplotlib axis
        Axis on which to plot.
    samples: array-like
        Posterior samples.
    title: str
        Title for the plot.
    cmap: str
        Colormap for contour.
    """
    # Ensure samples is 2D with shape (num_samples, 2)
    if samples.ndim > 2:
        samples = samples.reshape(-1, samples.shape[-1])

    x = np.linspace(-4, 4, 100)
    y = np.linspace(-4, 4, 100)
    X, Y = np.meshgrid(x, y)
    pos = jnp.stack([X.ravel(), Y.ravel()], axis=-1)

    # Kernel Density Estimate for Contours
    kde = multivariate_normal.pdf(
        pos, mean=jnp.mean(samples, axis=0), cov=jnp.cov(samples.T)
    )
    kde = kde.reshape(X.shape)

    ax.contourf(X, Y, kde, cmap=cmap, levels=30, alpha=0.7)
    ax.scatter(samples[:, 0], samples[:, 1], s=1, alpha=0.5, label="Samples")
    ax.set_title(title)
    ax.set_xlim([-4, 4])
    ax.set_ylim([-4, 4])
    ax.legend()


def plot_results(
    svi_result,
    svi_samples,
    guide_base_samples,
    guide_trans_samples,
    hmc_samples,
    zs,
    neutra_samples,
):
    """
    Visualize results for posterior samples.

    Parameters:
    svi_result: SVI result
        Results from SVI inference.
    svi_samples: array-like
        Samples generated by SVI.
    guide_base_samples: array-like
        Base samples from the guide.
    guide_trans_samples: array-like
        Transformed samples from the guide.
    hmc_samples: array-like
        Samples from Vanilla HMC.
    zs: array-like
        Latent samples in NeuTra HMC.
    neutra_samples: array-like
        Samples from NeuTra HMC.
    """
    fig, axes = plt.subplots(3, 2, figsize=(12, 12))

    plot_contours(axes[0, 0], hmc_samples, "Vanilla HMC")
    plot_contours(axes[0, 1], svi_samples, "SVI Posterior")
    plot_contours(axes[1, 0], guide_base_samples, "Guide Base Samples", cmap="Oranges")
    plot_contours(
        axes[1, 1], guide_trans_samples, "Guide Transformed Samples", cmap="Greens"
    )
    plot_contours(axes[2, 0], zs, "NeuTra Latent Space", cmap="Purples")
    plot_contours(axes[2, 1], neutra_samples, "NeuTra Transformed Samples", cmap="Reds")

    plt.tight_layout()
    plt.show()
